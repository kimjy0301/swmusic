import { GetStaticProps } from "next";
import Head from "next/head";
import Image from "next/image";
import { useRouter } from "next/router";
import { getPlaiceholder } from "plaiceholder";
import { ReactElement } from "react";
import { animated, Transition } from "react-spring";
import { TransformComponent, TransformWrapper } from "react-zoom-pan-pinch";
import BaseLayout from "../../../components/BaseLayout";
import CatalogLayout from "../../../components/CatalogLayout";

import { PrismaClient } from "@prisma/client";
import { catalog, page } from "../../../components/publicInterface";

export async function getStaticPaths() {
  const prisma = new PrismaClient();

  const catalogs: catalog[] = await prisma.catalog.findMany({
    include: { pages: true },
  });

  let paths = [];

  for (let i = 0; i < catalogs.length; i++) {
    const forCatalog: catalog = catalogs[i];

    if (forCatalog.pages) {
      for (let j = 0; j < forCatalog.pages.length; j++) {
        let tmpPath = {
          params: {
            catalogid: forCatalog.pages[j].catalogId.toString(),
            id: forCatalog.pages[j].pageNumber.toString(),
          },
        };

        paths.push(tmpPath);
      }
    }
  }

  return {
    paths,
    fallback: false,
  };
}
export const getStaticProps: GetStaticProps = async (context) => {
  const catalogId = context.params?.catalogid;
  const id = context.params?.id;

  const prisma = new PrismaClient();

  if (typeof id === "string" && typeof catalogId === "string") {
    let pageId: number = parseInt(id);
    let pCatalogId: number = parseInt(catalogId);

    const page: page | null = await prisma.page.findFirst({
      where: { pageNumber: pageId, catalogId: pCatalogId },
    });
    const page2: page | null = await prisma.page.findFirst({
      where: { pageNumber: pageId + 1, catalogId: pCatalogId },
    });

    const plaiceHolder1 = await getPlaiceholder(
      `http://${page?.ip}${page?.filePath}`
    );

    const plaiceHolder2 = await getPlaiceholder(
      `http://${page2?.ip}${page2?.filePath}`
    );
    return {
      props: {
        imageProps: {
          ...plaiceHolder1.img,
          blurDataURL: plaiceHolder1.base64,
        },
        imageProps2: {
          ...plaiceHolder2.img,
          blurDataURL: plaiceHolder2.base64,
        },
      },
    };
  } else {
    return { props: {} };
  }
};

const CatalogIndex = ({ imageProps, imageProps2 }: any) => {
  const router = useRouter();
  const items = [
    {
      id: router.asPath,
    },
  ];

  return (
    <>
      <Head>
        <title>SAMWOO MANUFACTURING CO., LTD.</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
        <meta
          name="viewport"
          content="initial-scale=1.0, width=device-width, user-scalable=no,maximum-scale=1.0,minimum-scale=1.0"
        />
      </Head>

      <div className="flex h-screen justify-center items-center flex-col">
        <Transition
          items={items}
          keys={(items: any) => items.id}
          from={{ opacity: 0, x: -250 }}
          initial={{ opacity: 0, x: -250 }}
          enter={{ opacity: 1, x: 0 }}
          leave={{ opacity: 0, x: 250 }}
        >
          {(styles) => (
            <animated.div
              style={{
                ...styles,
                position: "absolute",
              }}
            >
              <div className="flex">
                <TransformWrapper>
                  <TransformComponent>
                    <div className="relative catalog flex">
                      <Image {...imageProps} alt="test" placeholder={"blur"} />
                    </div>
                    <div className="relative catalog hidden lg:flex">
                      <Image {...imageProps2} alt="test" placeholder={"blur"} />
                    </div>
                  </TransformComponent>
                </TransformWrapper>
              </div>
            </animated.div>
          )}
        </Transition>
        {/* <div className="relative">
          <Link href="/catalog/1">Catalog 1</Link>
          <Link href="/catalog/2">Catalog 2</Link>
          <Link href="/catalog/3">Catalog 3</Link>
          <Link href="/catalog/4">Catalog 4</Link>
          <Link href="/catalog/5">Catalog 5</Link>
        </div> */}
      </div>
    </>
  );
};

export default CatalogIndex;

CatalogIndex.getLayout = function getLayout(page: ReactElement) {
  return (
    <BaseLayout>
      <CatalogLayout> {page}</CatalogLayout>
    </BaseLayout>
  );
};
